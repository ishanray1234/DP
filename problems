//LCS
#include <stdio.h>
#include<string.h>

int max(int a, int b)
{
    return (a > b)? a : b;
}

int lcs(char* X, char* Y, int m, int n,
        int dp[m+1][n+1])
{
    if (m == 0 || n == 0)
        return 0;
    if (X[m - 1] == Y[n - 1])
        return dp[m][n] = 1 + lcs(X, Y, m - 1, n - 1, dp);
 
    if (dp[m][n] != -1) {
        return dp[m][n];
    }
    return dp[m][n] = max(lcs(X, Y, m, n - 1, dp),
                          lcs(X, Y, m - 1, n, dp));
}

int main()
{
    char X[] = "ABCDe";
    char Y[] = "BFFFCe";
 
    int m = strlen(X);
    int n = strlen(Y);
    
    int dp[m+1][n+1];
    for(int i=0;i<=m;i++)
    {
        for(int j=0;j<=n;j++)
        {
            dp[i][j]=-1;
        }
    }
    
    printf("%d",lcs(X,Y,m,n,dp));

    return 0;
}


//for Longest Increasing Subsequence problem, sort the sequence and convert the two arrays into a LCS problem

//number of ways
#include <stdio.h>

int steps(int n)
{
    int count[n+1];
    count[0]=1;
    
    if(n>=1)
        count[1]=1;
    if(n>=2)
        count[2]=2;
    for(int i=3;i<=n;i++)
        count[i]=count[i-1]+count[i-2]+count[i-3];
    
    return count[n];
}

int main()
{
    int n=1;
    int dp[n];
    printf("%d",steps(n));

    return 0;
}

//Longest path in matrix
#include <stdio.h>
#include<limits.h>
int max(int a, int b)
{
    return (a > b)? a : b;
}

int step(int n,int m,int mat[n][m],int i,int j,int dp[n][m])
{
    if(i<0 || i>n-1 || j<0 || j>m-1)
        return 0;
    if(dp[i][j]!=-1)
        return dp[i][j];
        
    int x = 0, y =0, z = 0, w = 0;
    if(j!=m-1 && mat[i][j]+1==mat[i][j+1])
        x=1+step(n,m,mat,i,j+1,dp);
    if(j!=0 && mat[i][j]+1==mat[i][j-1])
        y=1+step(n,m,mat,i,j-1,dp);
    if(i!=n-1 && mat[i][j]+1==mat[i+1][j])
        z=1+step(n,m,mat,i+1,j,dp);
    if(i!=0 && mat[i][j]+1==mat[i-1][j])
        w=1+step(n,m,mat,i-1,j,dp);
        
    return dp[i][j]=max(x,max(y,max(z,max(w,1))));
}

int main()
{
    int mat[][3] = {{1, 10, 9},{5, 3, 8}, {4, 6, 7}};
    int n=3,m=3,ans=-1,result=1;
    
    int dp[n][m];
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
            dp[i][j]=-1;
    }
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(dp[i][j]==-1)
                result=step(n,m,mat,i,j,dp);
                
            if(result>ans)
            ans=result;
        }
       
    }
    printf("%d",ans);

    return 0;
}

//subset
#include <stdio.h>
#include<limits.h>
int max (int a, int b)
{
  return (a > b) ? a : b;
}

int isSubsetSum(int set[], int n, int sum)
{
    
    // Base Cases
    if (sum == 0)
        return 1;
    if (n == 0)
        return 0;
  
    // If last element is greater than sum,
    // then ignore it
    if (set[n - 1] > sum)
        return isSubsetSum(set, n - 1, sum);
  
    /* else, check if sum can be obtained by any 
of the following:
      (a) including the last element
      (b) excluding the last element   */
    return isSubsetSum(set, n - 1, sum)
           || isSubsetSum(set, n - 1, sum - set[n - 1]);
}
  
int main ()
{
    int set[] = { 3, 34, 4, 12, 5, 2 };
    int sum = 9;
    int n = sizeof(set) / sizeof(set[0]);
    if (isSubsetSum(set, n, sum) == 1)
        printf("Found a subset with given sum");
    else
        printf("No subset with given sum");
  return 0;
}
